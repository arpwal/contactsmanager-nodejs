name: Build and Publish

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches: [main]
    paths:
      - "src/**"
      - "package.json"
      - "tsconfig*.json"
      - ".eslintrc.js"
      - "!node_modules/**"
      - "!.github/**"
      - "!**.md"

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org/"
          scope: "@contactsmanager"

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run unit tests
        run: npm test

      - name: Run integration tests
        env:
          TEST_CONFIG: ${{ secrets.TEST_CONFIG }}
        run: npm run test:integration

      - name: Build package
        run: npm run build

  publish:
    needs: test
    runs-on: ubuntu-latest
    # Only publish when code is merged into main branch (not on PRs)
    if: github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/main' && github.event_name == 'push')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://registry.npmjs.org/"
          scope: "@contactsmanager"

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Install dependencies
        run: npm ci

      - name: Set default version bump for push events
        if: github.event_name == 'push'
        run: |
          echo "BUMP_TYPE=patch" >> $GITHUB_ENV

      - name: Check if version exists
        id: version_check
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Check if the next version would already exist in npm
          BUMP_TYPE="${{ github.event.inputs.version_bump || env.BUMP_TYPE }}"
          if [ "$BUMP_TYPE" = "patch" ]; then
            NEXT_VERSION=$(node -e "const v='$CURRENT_VERSION'.split('.'); v[2]++; console.log(v.join('.'))")
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEXT_VERSION=$(node -e "const v='$CURRENT_VERSION'.split('.'); v[1]++; v[2]=0; console.log(v.join('.'))")
          elif [ "$BUMP_TYPE" = "major" ]; then
            NEXT_VERSION=$(node -e "const v='$CURRENT_VERSION'.split('.'); v[0]++; v[1]=0; v[2]=0; console.log(v.join('.'))")
          fi

          # Check if version exists in npm
          if npm view "@contactsmanager/server@$NEXT_VERSION" version &>/dev/null; then
            echo "Version $NEXT_VERSION already exists in npm registry"
            echo "VERSION_EXISTS=true" >> $GITHUB_OUTPUT
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version $NEXT_VERSION is available"
            echo "VERSION_EXISTS=false" >> $GITHUB_OUTPUT
            echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create Release and Bump Version
        if: steps.version_check.outputs.VERSION_EXISTS != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Run release-it with the specified bump type (or use the default for push events)
          BUMP_TYPE="${{ github.event.inputs.version_bump || env.BUMP_TYPE }}"
          npm run release $BUMP_TYPE --ci --no-git.requireUpstream

          # Get new version for later use
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Publish to NPM
        if: steps.version_check.outputs.VERSION_EXISTS != 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm run publish-npm

      - name: Output Result
        if: steps.version_check.outputs.VERSION_EXISTS != 'true'
        run: echo "Successfully published version ${{ env.NEW_VERSION }} to NPM"

      - name: Version Already Exists
        if: steps.version_check.outputs.VERSION_EXISTS == 'true'
        run: |
          echo "::warning::Version ${{ steps.version_check.outputs.NEXT_VERSION }} already exists in NPM registry. No changes were made."
